from biochatter.prompts import BioCypherPromptEngine
import streamlit as st
import yaml

ss = st.session_state
import os

from components.handlers import (
    _regenerate_query,
    _rerun_query,
)

from components.kg import (
    _run_neo4j_query,
    _connect_to_neo4j,
    _determine_neo4j_connection,
)


def kg_panel():
    """
    Allow connecting to a BioCypher knowledge graph and querying by asking the
    LLM to answer questions about the graph.
    """
    # Short info
    st.markdown(
        "This section allows connecting to a DBMS and querying it by asking "
        "natural language questions about the knowledge graph. It works by "
        "sharing some information about the [BioCypher](https://biocypher.org) "
        "KG with the LLM in "
        "the form of a schema configuration, which can be enriched by "
        "information gained in building the graph. In the former case, this "
        "is achieved by using the `schema_config.yaml` file used to "
        "configure BioCypher, while the latter uses the `schema_info.yaml` "
        "that can be generated by BioCypher after the KG has been built. "
        "Using the `schema_info.yaml` file is recommended, as it contains "
        "more information about the graph. "
    )

    dbms_select, connection, upload = st.columns([1, 2, 2])

    with dbms_select:
        # drop down: select DBMS type
        dbms_type = st.selectbox(
            "Database type:",
            options=["Neo4j", "PostgreSQL", "ArangoDB"],
            index=0,
            on_change=_regenerate_query,
        )

    with connection:
        ip, port = st.columns(2)
        _determine_neo4j_connection()
        with ip:
            st.text_input("Database IP address:", key="db_ip")
        with port:
            st.text_input("Database port:", key="db_port")
        user, password = st.columns(2)
        with user:
            st.text_input("Username:", key="db_user")
        with password:
            st.text_input("Password:", key="db_password")

        # try connecting (only neo4j for now)
        if dbms_type == "Neo4j":
            success = _connect_to_neo4j()
        elif dbms_type == "PostgreSQL":
            success = False
        elif dbms_type == "ArangoDB":
            success = False

        if not success:
            if dbms_type == "Neo4j":
                st.error(
                    "Could not connect to the database. Please check your "
                    "connection settings."
                )
                st.button(
                    "Retry",
                    on_click=_connect_to_neo4j,
                    use_container_width=True,
                )
            else:
                st.error(
                    "This database type is not yet supported. Please select "
                    "Neo4j."
                )
        else:
            st.success(f"Connected to Neo4j database at {ss.get('db_ip')}.")

    with upload:
        schema_file = st.file_uploader(
            "Upload schema configuration or info file",
            type=["yaml"],
        )
        if schema_file:
            try:
                ss.schema_dict = yaml.safe_load(schema_file)
                ss.schema_from = "file"
                st.success("File uploaded!")
            except yaml.YAMLError as e:
                st.error("Could not load file. Please try again.")
                st.error(e)

        if ss.get("schema_dict"):
            st.success(
                f"Schema configuration loaded from {ss.get('schema_from')}!"
            )
        else:
            st.error(
                "Please upload a schema configuration or info file to continue "
                "or provide a graph with a schema info node."
            )

    if success and ss.get("schema_dict"):
        question = st.text_input(
            "Enter your question here:",
            on_change=_regenerate_query,
            # value="How many people named Donald are in the database?",
        )

        # TODO get schema from graph (when connecting) or upload
        # TODO ask about the schema more generally, without generating a query?

        if question:
            # manual schema info file
            prompt_engine = BioCypherPromptEngine(
                schema_config_or_info_dict=ss.schema_dict,
            )

            # generate query if not modified
            if ss.get("generate_query"):
                with st.spinner("Generating query ..."):
                    if dbms_type == "Neo4j":
                        ss.current_query = prompt_engine.generate_query(
                            question, dbms_type
                        )

            if dbms_type == "Neo4j":
                result = _run_neo4j_query(ss.current_query)

            elif dbms_type == "PostgreSQL":
                result = [
                    (
                        "Here would be a result if we had a PostgreSQL "
                        "implementation."
                    )
                ]

            elif dbms_type == "ArangoDB":
                result = [
                    (
                        "Here would be a result if we had an ArangoDB "
                        "implementation."
                    )
                ]

            st.text_area(
                "Generated query (modify to rerun):",
                key="current_query",
                height=200,
                on_change=_rerun_query,
            )

            st.markdown("### Results")
            if result[0]:
                st.write(result[0])

        if ss.get("schema_dict"):
            st.markdown("### Schema Info")
            st.write(ss.schema_dict)
