from biochatter.prompts import BioCypherPromptEngine
import streamlit as st
from components.handlers import (
    _regenerate_query,
    _rerun_query,
)
from components.kg import (
    _run_neo4j_query,
    _connect_to_neo4j,
    _determine_neo4j_connection,
)

ss = st.session_state

def display_info():
    """Display introductory information about the KG panel."""
    st.markdown(
        "This section allows connecting to a DBMS and querying it by asking "
        "natural language questions about the knowledge graph. It works by "
        "sharing some information about the [BioCypher](https://biocypher.org) "
        "KG with the LLM in the form of a KG schema, which is enriched by "
        "information gained in building the graph. This is achieved by using "
        "the `schema_info` node that can be generated by BioCypher after the "
        "KG has been created, using the method "
        "[`write_schema_info(as_node=True)`](https://biocypher.org/modules/biocypher.BioCypher.html#biocypher.BioCypher)."
    )

def setup_dbms_connection(dbms_select, connection, auth, connection_status, schema_status):
    """Set up database connection UI and handle connection."""
    with dbms_select:
        dbms_type = st.selectbox(
            "Database type:",
            options=["Neo4j", "PostgreSQL", "ArangoDB"],
            index=0,
            on_change=_regenerate_query,
        )

    with connection:
        ip, port = st.columns(2)
        _determine_neo4j_connection()
        with ip:
            st.text_input("Database IP address:", key="db_ip")
        with port:
            st.text_input("Database port:", key="db_port")
    with auth:
        user, password = st.columns(2)
        with user:
            st.text_input("Username:", key="db_user")
        with password:
            st.text_input("Password:", key="db_password")

        success = handle_connection(dbms_type)
    with connection_status:
        display_connection_status(success, dbms_type)
    with schema_status:
        display_schema_status()
    
    return dbms_type, success

def handle_connection(dbms_type):
    """Handle database connection based on type."""
    if dbms_type == "Neo4j":
        return _connect_to_neo4j()
    return False

def display_connection_status(success, dbms_type):
    """Display connection status messages."""
    if not success:
        if dbms_type == "Neo4j":
            st.error(
                "Could not connect to the database. Please check your "
                "connection settings."
            )
            st.button(
                "Retry",
                on_click=_connect_to_neo4j,
                use_container_width=True,
            )
        else:
            st.error(
                "This database type is not yet supported. Please select "
                "Neo4j."
            )
    else:
        st.success(f"Connected to Neo4j database at {ss.get('db_ip')}.")

def display_schema_status():
    """Display schema loading status."""
    if ss.get("schema_dict"):
        st.success(
            "Schema configuration loaded from graph!"
        )
    else:
        st.error(
            "Please provide a graph with a schema info node, using the "
            "BioCypher method `write_schema_info(as_node=True)`."
        )

def handle_query(dbms_type):
    """Handle query generation and execution."""
    question = st.text_input(
        "Enter your question here:",
        on_change=_regenerate_query,
    )

    if question:
        prompt_engine = create_prompt_engine()
        result = generate_and_execute_query(prompt_engine, dbms_type, question)
        display_query_results(result)

def create_prompt_engine():
    """Create BioCypherPromptEngine instance."""
    def conversation_factory():
        if ss.get("conversation"):
            return ss.conversation

    return BioCypherPromptEngine(
        schema_config_or_info_dict=ss.schema_dict,
        conversation_factory=conversation_factory,
    )

def generate_and_execute_query(prompt_engine, dbms_type, question):
    """Generate and execute query based on question."""
    if ss.get("generate_query"):
        with st.spinner("Generating query ..."):
            if dbms_type == "Neo4j":
                ss.current_query = prompt_engine.generate_query(
                    question, dbms_type
                )

    if dbms_type == "Neo4j":
        return _run_neo4j_query(ss.current_query)
    elif dbms_type == "PostgreSQL":
        return [("Here would be a result if we had a PostgreSQL implementation.")]
    elif dbms_type == "ArangoDB":
        return [("Here would be a result if we had an ArangoDB implementation.")]

def display_query_results(result):
    """Display query results and schema info."""
    st.text_area(
        "Generated query (modify to rerun):",
        key="current_query",
        height=200,
        on_change=_rerun_query,
    )

    st.markdown("### Results")
    if result[0]:
        st.write(result[0])

    if ss.get("schema_dict"):
        st.markdown("### Schema Info")
        st.write(ss.schema_dict)

def kg_panel():
    """
    Allow connecting to a BioCypher knowledge graph and querying by asking the
    LLM to answer questions about the graph.
    """
    display_info()

    dbms_select, connection, auth = st.columns([1, 2, 2])
    connection_status, schema_status = st.columns([2, 2])
    dbms_type, success = setup_dbms_connection(dbms_select, connection, auth, connection_status, schema_status)

    if success and ss.get("schema_dict"):
        handle_query(dbms_type)